#!/usr/bin/perl -w

#	MOSIX $Id: prep,v 1.42 2008-08-18 17:32:36 lior Exp $


use strict;
use Getopt::Long;
use File::Basename;


sub print_action_title;
sub print_action_finish;
sub apply_site_conf;
sub checkout_from_svn;
sub run_make;
sub clean_old_prep;
sub tagSourceTree;


my ($help, $verbose);
my $progName = basename($0);
my $baseDir = dirname($0);


my $projectName     = "infod";
my $svnRepository   = "/opt/repos/cl/";
my $svnHost         = "oraion";
# Version parameters
my $extraVersion    = 0;
my $extraSVNTag     = "HEAD";
my $extraRel        = "";

my $currentArch = `uname -m`;
chomp($currentArch);

# Importnat Directories/files 
chomp(my $prepDir = `pwd`);
my $tools               ="$prepDir/../scripts";
my $user                ="$prepDir/../";
my $manDir              = "$prepDir/../man";
my $siteDir             = "$prepDir/site-conf";
my $siteInfoFile        = "include/site_info.h";
my $changelogFileName   = "CHANGELOG";
my $buildDirectory      = "$prepDir/build";
my $svnDirectory        = "$buildDirectory/svn-dir";



my $siteName = "contrib";
my $noclean_prep = 0;
my $doOp = "compile";
my $packMethod = "tar";
my $topDir = "";

## Site dependent parameters ##
my @progs = ();
my %extraFiles = ();
my $packageDir = "";
my $tarBallName = "";
my $makeCmd      = "";
my $packMPI      = 0;
my $stripBinaries = 0;
my $justPackMode = 0;  # For testing of the packaging process. Assuming all 
                       # requirements are already done (cvs, compile)

sub usage
{
    print <<"EOF";
$0 [options]
Prepare an infod package

OPTIONS:
--site site-name    Use site-name for compilation. The special site "contrib"
                    may be used to produce a general package without protection
--lsite             List avilable sites
--noclean           Dont perform clean after prep
--rel <release>     Compile the given release from the svn
--deb               Generate a debian package (!!! not implemented yet !!!)
--rpm               Generate an RPM package (!!! not implemented yet !!!) 
--tag <top-dir>     Perform svn tag on the project. The release
                    is taken from the changelong file
--svnhost host      SVN host to use
 -v                 Verbose mode 
--help              This help message
EOF
}

GetOptions( "noclean"   => \$noclean_prep,
	    "site=s"    => \$siteName,
	    "lsite"     => sub { $doOp = "list-sites";},
            "rel=s"     => \$extraRel,
            "deb"       => sub { $packMethod = "deb";},
            "rpm"       => sub { $packMethod = "rpm";},
            "tag=s"     => sub { $doOp = "tag"; 
                                 $topDir =  $_[1];},
	    "svnhost=s" => \$svnHost,
            "just-pack" => \$justPackMode,

            "v"         => \$verbose,
	    "help"      => \$help ,
	    );

# Printing help and exiting
if ($help) {
    usage();
    exit(0);

}
if($doOp eq "tag") {
  my $res = tagSourceTree($topDir);
  exit $res;

} elsif ($doOp eq "list-sites") {
    system("ls -la $siteDir");
    exit(0);
}



################# List of binaries this package contain ######

my $packFilesHash = 
  {	
   # --------------MMON ------------
   'mmon'               => {
                            orig    => "mmon/mmon",
                            dest    => "/usr/bin/mmon",
                            contrib => 1,
                            mode    => "",
                            strip   => 1,
			    type    => "bin",
                           },
   'mmon.static'               => {
                            orig    => "mmon/mmon.static",
                            dest    => "/usr/bin/mmon.static",
                            contrib => 1,
                            mode    => "",
                            strip   => 1,
			    type    => "bin",
                           },

   'mmon.man'           => {
                            orig    => "mmon/mmon.man",
                            dest    => "/usr/share/man/man1/mmon.1",
                            contrib => 1,
                            mode    => "",
                            gzip    => 1,
			    type    => "man",
                           },
   
   "mmon.cfg.example"  =>  {
                            orig    => "mmon/mmon.cfg.example",
                            dest    => "/usr/share/doc/infod/mmon.cfg.example",
                            contrib => 1,
                            mode    => "",
			    type    => "conf",
                           },
   # -------------- INFOD -------------
   'infod'              => {
                            orig    => "infod/infod",
                            dest    => "/usr/sbin/infod",
                            contrib => 1,
                            mode    => "",
                            strip   => 1,
			    type    => "bin",
                           },
   'infod.static'       => {
                            orig    => "infod/infod.static",
                            dest    => "/usr/sbin/infod.static",
                            contrib => 1,
                            mode    => "",
                            strip   => 1,
			    type    => "bin",
                           },
   'infod.conf'         => {
                           orig    => "infod/infod.conf.sample",
			   dest    => "/etc/infod/infod.conf",
			   contrib => 1,
			   mode    => "",
			   type    => "conf",
                         },
   
   'infod.init'         => {
                            orig    => "infod/infod.init",
                            dest    => "/etc/init.d/infod",
                            contrib => 1,
                            mode    => "",
			    type    => "script",
                           },
   
   'infod.default-args' => {
                            orig    => "infod/infod.default-args",
                            dest    => "/etc/default/infod",
                            contrib => 1,
                            mode    => "",
                            conf    => 1,
			    type    => "conf",
                           },
   'infod.man'          => {
                            orig    => "infod/infod.man",
                            dest    => "/usr/share/man/man1/infod.1",
                            contrib => 1,
                            mode    => "",
                            gzip    => 1,
			    type    => "man",
                           },
   # ------------ INFOD utils -------------
   'infod-ctl'          => {
                            orig    => "bin/infod-ctl",
                            dest    => "/usr/sbin/infod-ctl",
                            contrib => 1,
                            mode    => "",
                            strip   => 1,
			    type    => "bin",
                           },
   'infod-ctl.man'      => {
                            orig    => "infod-ctl/infod-ctl.man",
                            dest    => "/usr/share/man/man1/infod-ctl.1",
                            contrib => 1,
                            mode    => "",
                            gzip    => 1,
			    type    => "man",
                           },
   
   'infod-client'       => {
                            orig    => "bin/infod-client",
                            dest    => "/usr/bin/infod-client",
                            contrib => 1,
                            mode    => "",
                            strip   => 1,
			    type    => "bin",
                           },
   'infod-client.man'   => {
                            orig    => "infod-client/infod-client.man",
                            dest    => "/usr/share/man/man1/infod-client.1",
                            contrib => 1,
                            mode    => "",
                            gzip    => 1,
			    type    => "man",
                           },
   'infod-best'         => {
                            orig    => "bin/infod-best",
                            dest    => "/usr/bin/infod-best",
                            contrib => 1,
                            mode    => "u+s",
                            strip   => 1,
			    type    => "bin",
                           },
   'infod-best.man'     => {
                            orig    => "infod-best/infod-best.man",
                            dest    => "/usr/share/man/man1/infod-best.1",
                            contrib => 1,
                            mode    => "",
                            gzip    => 1,
			    type    => "man",
                           },
   
   'testload'         => {
                            orig    => "bin/testload",
                            dest    => "/usr/bin/testload",
                            contrib => 1,
                            mode    => "",
                            strip   => 1,
			    type    => "bin",
                           },
   'testload.man'     => {
                            orig    => "testload/test_load.man",
                            dest    => "/usr/share/man/man1/testload.1",
                            contrib => 1,
                            mode    => "",
                            gzip    => 1,
			    type    => "man",
                           },

    'repeat-bg'         => {
                            orig    => "bin/repeat-bg",
                            dest    => "/usr/bin/repeat-bg",
                            contrib => 1,
                            mode    => "",
			    type    => "script",
                           },

    'repeat-bg.man'     => {
                            orig    => "testload/repeat-bg.man",
                            dest    => "/usr/share/man/man1/repeat-bg.man",
                            contrib => 1,
			    gzip    => 1,
                            mode    => "",
			    type    => "man",
                           },



   # Copyright 
   'copyright'         => {
                           orig    => "prep/misc/LICENSE",
                           dest    => "/usr/share/doc/infod/copyright",
                           contrib => 1,
                           mode    => "",
			   type    => "txt",
                          },
   'README'            => {
                           orig    => "prep/misc/contrib-README",
                           dest    => "/usr/share/doc/infod/README",
                           contrib => 1,
                           mode    => "",
			   type    => "txt",
                          },
   'INSTALL'           => {
                           orig    => "prep/misc/contrib-INSTALL",
                           dest    => "/usr/share/doc/infod/INSTALL",
                           contrib => 1,
                           mode    => "",
			   type    => "txt",
                          },
  };

my @normalProgs=("infod",
                 "infod.static",
                 "infod-ctl",
                 "infod-client",
                 "infod-best",
		 "xnothing",
                 "mmon",
                 "mmon.static",
                 "testload",
                 "testload-mpi",
                 "repeat-bg",
                 "moscc",
                 "xmosrun",
                 "xmosq",
                 "c4",
                 "daemonize",
                 "cps",
                 "qtest",
                 "qmdtest");

my @contribProgs = ("infod",
                    "infod.static",
                    "infod-ctl",
                    "infod-client",
                    "infod-best",
                    "mmon",
                    "mmon.static",
                    "testload",
                    "repeat-bg",
                   );



my %normalExtraFiles=( "EXTRA-VERSION"             => "EXTRA-VERSION",
                       "EXTRA-CHANGELOG"           => "EXTRA-CHANGELOG",
                       "prep/misc/install"         => "install",
                       "mmon/mmon.cfg.example"     => "mmon.cfg.example",
		       "infod/infod.init"          => "infod.init",
		       "infod/infod.default-args"  => "infod.default-args"
	       );

my %contribExtraFiles=(
                       "prep/misc/LICENSE"         => "LICENSE",
                       "prep/misc/contrib-README"  => "README",
                       "prep/misc/contrib-INSTALL" => "INSTALL",
                       "prep/misc/install.contrib" => "install",
                       "mmon/mmon.cfg.example"     => "mmon.cfg.example",
               	       "infod/infod.init"          => "infod.init",
                       "infod/infod.default-args"  => "infod.default-args"
                      );

my $mpiChannelDir = "ch_mosix";
my @mpiExtraFiles = ("README.mpi", "apply-mpi-fix");

#############################################################################
############################# MAIN ##########################################
#############################################################################
if($verbose) {
    print "prepDir     : $prepDir\n";
    print "siteDir     : $siteDir\n";
    print "projectName : $projectName\n";
}

##### Packaging the binaries part ######

# Handling the rest of the command line arguments
# We take the version number and the release number from the given parameter
if($extraRel) {

  # First we check that the release is in the right format
  if(($extraRel =~ /^\d+\.\d+\.\d+$/  ) || $extraRel =~ /^\d+\.\d+$/)
    {
	$extraVersion = $extraRel;
	$extraRel =~ s/\./-/g;
	$extraSVNTag = "rel-$extraRel";
	print "$extraSVNTag\n";
    }
    else {
	die "Relese number must be in the form of num.num.num or num.num\n";
      }
}

if(!$siteName)
{
    die "Must specify site name\n";
}
setParameters();
check_site_conf($prepDir);

if(!$justPackMode) {
    clean_old_prep($prepDir);
    
    mkdir $buildDirectory;
    
    checkout_from_svn($prepDir);
}

# The version must be calculated also in the case of $justPackMode
if(!$extraRel) {
    die("Can't find version in $changelogFileName\n")
      if(! get_version_from_changelog("$svnDirectory/$projectName/trunk") );
}

if(!$justPackMode) {
    apply_site_conf($prepDir);
    # The paremeter setting 
    compileInfod($prepDir);
}

######## Packaging the infod package #########
if($packMethod eq "tar") {
    generateTarball($prepDir);
}
elsif($packMethod eq "deb") {
    generateDEB($prepDir);
} 
elsif($packMethod eq "rpm") {
    generateRPM($prepDir);
}

if(! $noclean_prep) {
    clean_old_prep($prepDir);
}




################################# Functions #############################

sub tagSourceTree {
  my $topDir = shift;
  if(!get_version_from_changelog($topDir)) {
    die("Error getting version number from $changelogFileName\n");
  }
  $extraRel = $extraVersion;
  $extraRel =~ s/\./-/g;
  my $extraSVNTag = "rel-$extraRel";
  print "Clip release tag: $extraSVNTag\n";
  die("Setting tag $extraSVNTag failed\n")
    if(system("svn tag $extraSVNTag $topDir"));
  return 1;
}



sub print_action_title 
{
    my $title_str = shift;

    print "================================================\n";
    print "| $title_str\n";
    print "================================================\n";

}

sub print_action_finish
{
    print ".... Done\n";
}

sub setParameters {
  if($siteName eq "contrib")
    {
      @progs        = @contribProgs;
      %extraFiles   = %contribExtraFiles;
      $packageDir   = "clusterLogic-Infod-__EXTRA_VERSION__";
      $makeCmd      = "make ";
      $packMPI      = 0;
      $stripBinaries = 1;
      $tarBallName  = "clusterLogic-Infod-__EXTRA_VERSION__.__ARCH__.tar.bz";
  }
  else {
      @progs        =  @normalProgs;
      %extraFiles   = %normalExtraFiles;
      $packageDir   = "mosix-extra-__EXTRA_VERSION__";
      $makeCmd      = "make ";
      $packMPI      = 1;
      $stripBinaries = 0;
      $tarBallName  = "mosix-extra-__EXTRA_VERSION__-${siteName}.tar.bz";

  }
}


sub createTarballDirStructure
{
    my $dir = shift;

    print_action_title("Creating dir structure");
    die ("Can't chdir dir: $dir $!\n")
	if(!chdir($dir));

    system("rm -rf $buildDirectory/$packageDir");
    die("Can't create dir structure $!\n")
      if(!mkdir("$buildDirectory/$packageDir")      ||
         !mkdir("$buildDirectory/$packageDir/man")  ||
         !mkdir("$buildDirectory/$packageDir/man/man1") 
        );
    print_action_finish();
}

sub check_site_conf
{
    print_action_title("Checking precence of $siteName configuration");

    if ( -f "$siteDir/$siteName.h" )
    {
	print "Site $siteName configuration file exsists\n";
    }
    else {
	die "Error: Site $siteName configuration file does not exists!!!\n";
    }
    print_action_finish();
}


sub apply_site_conf
{
    my $dir = shift;
    print_action_title("Setting site $siteName configuration");

    die ("Can't chdir dir: $dir $!\n")
	if(!chdir($dir));

    my $destSiteInfoFile = "$buildDirectory/$projectName/$siteInfoFile";
    if ( -f "$siteDir/$siteName.h" ) {
	system("cp -pf $siteDir/$siteName.h $destSiteInfoFile");
    } else {
	print "Site $siteName configuration file does not exists!!!";
	exit(1);
    }
}


sub checkout_from_svn
{
    my $dir = shift;

    print_action_title("Checking out sources from svn");

    die ("Can't chdir dir: $dir $!\n")
      if(!chdir($dir));
    die("Can't create dir structure $svnDirectory$!\n")
      if(!mkdir("$svnDirectory"));
    
       die ("Can't chdir to $svnDirectory $!\n")
         if(!chdir($svnDirectory));

    die("svn checkout failed\n")
      if(system("svn   checkout svn+ssh://$svnHost/$svnRepository/$projectName -r $extraSVNTag"));

    print_action_finish();
    return 1;
}

#############################################################################
## Taking the upper most version from the change log file and using this as 
## the version. This force us to write down in the changelog the new version
## detailes.
#############################################################################
sub get_version_from_changelog
{
    my $dir = shift;

    my $line;
    my $ver = "";

    open FILE, "$dir/$changelogFileName" or return 0;
    while (defined($line = <FILE>)) {
	if($line =~ /Version:\s+([\d\.]+)/) {
	    print "Found version $1 in $changelogFileName file\n";
	    $ver = $1;
	    last;
	}
    }
    close FILE;

    if($ver eq "") {
	print "Could not find version number in $changelogFileName\n";
	return 0;
    }
    $extraVersion = $ver;
    # Creating the tar ball
    $tarBallName =~ s/__EXTRA_VERSION__/$extraVersion/;
    $packageDir =~ s/__EXTRA_VERSION__/$extraVersion/;

    return 1;
}

sub compileInfod
{
    my $dir = shift;
    my $mainDir = "$svnDirectory/$projectName/trunk";
    
    print "Running make in $mainDir";
    die ("Can't chdir to  $mainDir $!\n")
	if(!chdir($mainDir));
    
    system($makeCmd);
}


sub clean_old_prep
{
    my $dir = shift;

    print_action_title("Cleaning old prep remnants");
    die ("Can't chdir to: $dir $!\n")
	if(!chdir($dir));
    
    system("rm -rf $svnDirectory");
    system("rm -rf $dir/$packageDir");
    system("rm -rf $buildDirectory");
    
    print_action_finish();
}

sub pack_mpi 
{
    my $dir = shift;
    print_action_title("Packing MPI channel");
    
    die ("Can't chdir dir: $dir $!\n")
	if(!chdir($dir));

    die("Can't create dir structure $!\n")
      if(!mkdir("$buildDirectory/$packageDir/mpi"));

    # The binaries
    my $srcMpiDir = "$svnDirectory/$projectName/mpi";
    my $dstMpiDir = "$buildDirectory/$packageDir/mpi";
    die ("Can't chdir to: $srcMpiDir $!\n")
	if(!chdir($srcMpiDir));
    
    print("cp  @mpiExtraFiles $dstMpiDir\n");
    system("cp -f @mpiExtraFiles $dstMpiDir");
    system("cp -a $mpiChannelDir $dstMpiDir");
    # cleaning the SVN directory
    #print "Before running find\n";
    #system("tree");
    system("find $dstMpiDir -name SVN -type d | xargs rm -rf ");
    #print "After running find\n";
    #system("tree");
}

sub generateTarball
{
    my $dir = shift;
    die ("Can't chdir to: $dir $!\n")
	if(!chdir($dir));

    createTarballDirStructure($prepDir);
    
    #pack_mpi($prepDir) 
    #  if($packMPI);

    print_action_title("Packing binaries and manuals");

    # The binaries
    my $srcDir = "$svnDirectory/$projectName/trunk";
    my $dstBinDir = "$buildDirectory/$packageDir";
    die ("Can't chdir to: $srcDir $!\n")
    if(!chdir($dstBinDir));



    # Copying the files, then stripping .... 
    foreach my $file (keys %$packFilesHash) {
        my $orig    = "$srcDir/".$packFilesHash->{$file}->{orig};
        my $dest    = $packFilesHash->{$file}->{dest};
        my $dirname = dirname($dest);
	my $destFile = basename($dest);
        

	system("cp $orig $destFile") == 0 or
          die("Error copying $orig $destFile\n");

        if($packFilesHash->{$file}->{gzip}) {
            system("gzip --best $destFile") == 0 or  
              die("Error compressing $destFile\n");
        }
        if($packFilesHash->{$file}->{strip}) {
            system("strip $destFile") == 0 or 
              die("Error stripping binary $destFile\n");
        }
        
    }

    $tarBallName =~ s/__ARCH__/$currentArch/;

    chdir($buildDirectory);
    system("tar cvfj $dir/$tarBallName  $packageDir");
}



sub generateDEB {
    my $dir = shift;

    die ("Can't chdir to: $dir $!\n")
      if(!chdir($dir));

    print_action_title("Generating Debian package");
    my $debDir = "$buildDirectory/debian";
    system("rm -rf $debDir");
    
    # The DEBIAN dir
    system("mkdir -p $debDir/DEBIAN");
    foreach my $file ("control", "postinst" ,"prerm" , "postrm") {
	system("cp $prepDir/misc/debian/$file $debDir/DEBIAN/");
    }

    # copying the files
    foreach my $file (keys %$packFilesHash) {
        my $orig    = "../".$packFilesHash->{$file}->{orig};
        my $dest    = $packFilesHash->{$file}->{dest};
        my $dirname = dirname($dest);

        

        system("mkdir -p $debDir/$dirname") == 0 or 
          die("Could not create $dirname: $!\n");
        system("cp $orig $debDir/$dest") == 0 or
          die("Error copying $orig $dest\n");
        if($packFilesHash->{$file}->{gzip}) {
            system("gzip --best $debDir/$dest") == 0 or  
              die("Error compressing $debDir/$dest\n");
        }
        if($packFilesHash->{$file}->{strip}) {
            system("strip $debDir/$dest") == 0 or 
              die("Error stripping binary $debDir/$dest\n");
        }
        
        if($packFilesHash->{$file}->{conf}) {
            system("echo $dest >> $debDir/DEBIAN/conffiles");
        }
    }

    
    system("cp $prepDir/misc/debian/changelog.Debian $debDir/usr/share/doc/infod/");
    system("gzip -9 $debDir/usr/share/doc/infod/changelog.Debian");

    system("find $debDir -type d | xargs chmod 755");
    my $arch = `uname -m`;
    chomp $arch;

    system("fakeroot dpkg-deb --build $debDir infod-$extraVersion-$arch.deb");
}

sub generateRPM {
   my $dir = shift;
   
   print_action_title("Generating RPM package");
   print "Not implemented yet\n";
}
